mysql> create database advance_java;

mysql> use advance_java;

mysql> show tables;

mysql> create table emp(id int, name varchar(50), salary int);

mysql> insert into emp values(1, 'abc', 1000);

mysql> insert into emp(id, name) values(2, 'xyz');

mysql> update emp set salary = 5500 where id = 1;

mysql> delete from emp where id = 2;

mysql> select * from emp where id = 1;

mysql> select id from emp;

mysql> select id, name from emp;

mysql> truncate table emp;

mysql> drop database advance_java;

mysql> alter table emp add salary int;

ALTER TABLE table_name CHANGE COLUMN name to name1 varchar(50);

RENAME TABLE employees TO staff;

=================================================

# Primary Key with table creation:

mysql> create table emp(id int primary key, name varchar(50), salary int);

=================================================

# Primary Key after table creation:

mysql> create table emp(id int, name varchar(50), salary int);

mysql> alter table emp add primary key(id);

================================================


last_login 

create table emp(created_datetime datetime, modified_datetime datetime,last_login datetime);

create table emp(created_datetime timestamp, modified_datetime timestamp,last_login timestamp);

select last_login from ss where loginid like 'sky123@gmail.com';

select count(last_login) from ss where loginid like "rp123@gmail.com";

select * from emp order by last_login limit 0,1;

select * from emp order by last_login limit 1,1;

select * from emp where last_login <(select max(last_login) from emp);


*********************************************************************************************************
# foreign key without on update cascade & on delete cascade

mysql> create table emp(id int primary key, name varchar(50), salary int);

mysql> create table dept(id int primary key, dept_name varchar(50),emp_id int, add foreign key(emp_id) refrences emp(id);

mysql> alter table dept add foreign key(emp_id) references emp(id);

 child =  dept
parent = emp

=================================================

# foreign key with on update cascade & on delete cascade

mysql> create table emp(id int primary key, name varchar(50), salary int);

 mysql> create table dept(id int primary key, dept_name varchar(50),emp_id int, add foreign key(emp_id) refrences emp(id) on update cascade on delete cascade;

mysql> alter table dept add foreign key(emp_id) references empt(id) on update cascade on delete cascade;

 child =  dept
parent = emp

====================================================

Aggregate function

mysql> create table emp(id int primary key, name varchar(50), salary int);

mysql> select max(salary) from emp;

mysql> select min(salary) from emp;

mysql> select sum(salary) from emp;

mysql> select count(salary) from emp;

mysql> select count(*) from emp;


====================================================

mysql> select * from emp;

mysql> select * from emp order by salary;

mysql> select * from emp order by salary desc;

mysql> select * from emp order by name;

mysql> select * from emp order by name desc;

mysql> select * from emp where id = 1;

mysql> select * from emp where name = 'abc';

mysql> select * from emp where name = 'a';

mysql> select * from emp where name like 'a';

mysql> select * from emp where name like 'a%';

===========================================

# limit

mysql> select * from emp;

mysql> select * from emp limit 0, 2;

mysql> select * from emp limit  2, 2;

=============================================

# second highest with limit and without limit

mysql> select * from emp;

mysql> select max(salary) from emp;

mysql> select * from emp order by salary desc limit 1, 1;

mysql> select * from emp order by salary desc limit 0, 2;

mysql> select max(salary) from emp where salary < (select max(salary) from emp);

mysql> select * from emp where salary = (select max(salary) from emp where salary < (select max(salary) from emp));

=======================
group by

mysql> select salary, count(*) from emp group by salary;

=======================

# aliases

mysql> select emp.id as emp_id, name, salary from emp;

mysql> select emp.id as emp_id, name as emp_name, salary as emp_salary from emp;

mysql> select e.id as emp_id, name as emp_name, salary as emp_salary from emp as e;

mysql> select e.id  emp_id, name emp_name, salary emp_salary from emp e;

mysql> select e.id as emp_id, name as emp_name, salary as emp_salary, d.id as dept_id, name as dept_namee from emp as e, dept as d; // most imp

=============================

# joins

mysql> select * from emp;
+----+-----------+--------+
| id | name      | salary |
+----+-----------+--------+
|  1 | abc       |   1000 |
|  2 | xyz       |    100 |
|  3 | pqr       |    700 |
|  4 | vinjan    |   1700 |
|  5 | suraj     |   1100 |
|  6 | priya     |   2100 |
|  7 | Lokesh |   1200 |
+----+-----------+--------+

mysql> select * from dep t;
+-----+-----------+
| id  | dept_name |
+-----+-----------+
|   1 | sales     |
|   2 | marketing |
|   3 | it        |
| 100 | accounts  |
+-----+-----------+

mysql> select * from emp inner join dept on emp.id = dept.id;
+----+------+--------+----+-----------+
| id | name | salary | id | dept_name |
+----+------+--------+----+-----------+
|  1 | abc  |   1000 |  1 | sales     |
|  2 | xyz  |    100 |  2 | marketing |
|  3 | pqr  |    700 |  3 | it        |
+----+------+--------+----+-----------+

mysql> select * from emp left join dept on emp.id = dept.id;
+----+-----------+--------+------+-----------+
| id | name      | salary | id   | dept_name |
+----+-----------+--------+------+-----------+  
|  1 | abc       |   1000 |    1 | sales     |
|  2 | xyz       |    100 |    2 | marketing |
|  3 | pqr       |    700 |    3 | it        |
|  4 | vinjan    |   1700 | NULL | NULL      |
|  5 | suraj     |   1100 | NULL | NULL      |
|  6 | priya     |   2100 | NULL | NULL      |
|  7 | Lokesh |   1200 | NULL | NULL      |
+----+-----------+--------+------+-----------+

mysql> select * from emp right join dept on emp.id = dept.id;
+------+------+--------+-----+-----------+
| id   | name | salary | id  | dept_name |
+------+------+--------+-----+-----------+
|    1 | abc  |   1000 |   1 | sales     |
|    2 | xyz  |    100 |   2 | marketing |
|    3 | pqr  |    700 |   3 | it        |
| NULL | NULL |   NULL | 100 | accounts  |
+------+------+--------+-----+-----------+
r
mysql> select * from emp left join dept on emp.id = dept.id union select * from emp right join dept on emp.id = dept.id;
+------+-----------+--------+------+-----------+
| id   | name      | salary | id   | dept_name |
+------+-----------+--------+------+-----------+
|    1 | abc       |   1000 |    1 | sales     |
|    2 | xyz       |    100 |    2 | marketing |
|    3 | pqr       |    700 |    3 | it        |
|    4 | vinjan    |   1700 | NULL | NULL      |
|    5 | suraj     |   1100 | NULL | NULL      |
|    6 | priya     |   2100 | NULL | NULL      |
|    7 | Lokesh |   1200 | NULL | NULL      |
| NULL | NULL      |   NULL |  100 | accounts  |
+------+-----------+--------+------+-----------+

mysql> select * from emp left join dept on emp.id = dept.id where dept.id is null union select * from emp right join dept on emp.id = dept.id where emp.id is null;
+------+-----------+--------+------+-----------+
| id   | name      | salary | id   | dept_name |
+------+-----------+--------+------+-----------+
|    4 | vinjan    |   1700 | NULL | NULL      |
|    5 | suraj     |   1100 | NULL | NULL      |
|    6 | priya     |   2100 | NULL | NULL      |
|    7 | Lokesh |   1200 | NULL | NULL      |
| NULL | NULL      |   NULL |  100 | accounts  |
+------+-----------+--------+------+-----------+

===============================================================================

# testing

mysql> select * from emp left join dept on emp.id = dept.id where dept.id is null;
+----+-----------+--------+------+-----------+
| id | name      | salary | id   | dept_name |
+----+-----------+--------+------+-----------+
|  4 | vinjan    |   1700 | NULL | NULL      |
|  5 | suraj     |   1100 | NULL | NULL      |
|  6 | priya     |   2100 | NULL | NULL      |
|  7 | Lokesh |   1200 | NULL | NULL      |
+----+-----------+--------+------+-----------+


mysql> select * from emp right join dept on emp.id = dept.id where emp.id is null;
+------+------+--------+-----+-----------+
| id   | name | salary | id  | dept_name |
+------+------+--------+-----+-----------+
| NULL | NULL |   NULL | 100 | accounts  |
+------+------+--------+-----+-----------+


================================================================
 Marksheet

mysql> select * from marksheet;

mysql> select *, (physics + chemistry + maths) as total from marksheet;

mysql> select *, (physics + chemistry + maths) as total from marksheet order by total;

mysql> select *, (physics + chemistry + maths) as total from marksheet order by total desc;

mysql> select *, (physics + chemistry + maths) as total from marksheet order by total desc limit 0, 3;

mysql> select *, (physics + chemistry + maths) as total from marksheet where physics >= 33 and chemistry >= 33 and maths >=33 order by total desc limit 0, 3;
========================================================


TRIGERSSSSSSSS

1.After update

     create trigger after_update
     after update on dept
     for each row
    update emp set salary = salary+1000 where id =3;

2.before_update

 create trigger before_update
     before delete on emp
     for each row
     update dept set name = "English" where id = 1 ;


#before update
create trigger before_update
 before update on emp
 for each row 
insert into dept(dept_id,dept_name) values(old.id,old.name);


3.after delete

 create trigger after_delete
    after delete on emp
    for each row
    update dept set salary = 6577 where id = 3;


CREATE TRIGGER after_delete
AFTER DELETE ON emp
FOR EACH ROW
BEGIN
    DELETE FROM dept WHERE dept_id = 1;
END$$


4.before delete
create trigger after_update 
after update on emp 
for each row 
delete from dept where dept_id=2; 


 create trigger before_delete
    before delete on emp
     for each row
    insert into dept values(4,"social");


5.after insert

 create trigger after_insert
     after insert on emp
     for each row
    delete from dept where id = 4;


6.before_insert

 create trigger before_insert
    before insert on emp
    for each row
    insert into dept values (54, "commerce");


==========================================================
# Stored Procedure (in)
==========================================================

mysql> delimiter &&
mysql> create procedure empIn(in c int)
     begin
     select * from emp where id = c;
     end &&
    
mysql> set @input = 11;

mysql> call empIn(@input);

==========================================================
# Stored Procedure (out)
==========================================================

mysql> delimiter &&
mysql> create procedure empOut(out c int)
    -> begin
    -> select salary into c from emp where id = 10;
    -> end &&
    
mysql> call empOut(@output);

mysql> select @output;    
  	
==========================================================  
# Stored Procedure (inout)
==========================================================

mysql> delimiter &&
mysql> create procedure empInOut(int c int ,out i int)
    -> begin
    -> select salary into c from emp where id = i;
    -> end &&
    
mysql> set @inout = 1;

mysql> call empInOut(@inout);

mysql> select @inout;
    
========================================================== 
# Stored Function
==========================================================

mysql> delimiter &&
mysql> create function square(num int)
    -> returns int
    -> deterministic
    -> begin
    -> return num*num;
    -> end &&
    
mysql> select square(10);

==========================================================